var e=[,(e,t,r)=>{r.r(t),r.d(t,{CompareEngine:()=>i});var a=r(2),n=r(4),o=r(5),s=r(7);class i{determineArrayIndexFn;compareStateIndex;arrayIndex;panels;constructor(e,t,r){this.determineArrayIndexFn=e,this.compareStateIndex={left:new Map,right:new Map},this.arrayIndex={left:new Map,right:new Map},this.panels={left:t,right:r}}_logsEnabled=!1;set logsEnabled(e){this._logsEnabled=e}get leftValue(){return o.CompareHelper.deepClone(this.panels[n.PanelEnum.LEFT])}get rightValue(){return o.CompareHelper.deepClone(this.panels[n.PanelEnum.RIGHT])}updateLeft(e){this.update(n.PanelEnum.LEFT,e)}updateRight(e){this.update(n.PanelEnum.RIGHT,e)}leftToRight(){this.updateRight(this.panels[n.PanelEnum.LEFT])}rightToLeft(){this.updateLeft(this.panels[n.PanelEnum.RIGHT])}updateCompareIndex(){this.compareStateIndex[n.PanelEnum.LEFT].clear(),this.compareStateIndex[n.PanelEnum.RIGHT].clear(),this.compare(n.PanelEnum.LEFT,this.panels[n.PanelEnum.LEFT]),this.compare(n.PanelEnum.RIGHT,this.panels[n.PanelEnum.RIGHT])}hasChange(){return this.compareStateIndex.right.get("")?.isChanged??!1}getLeftState(e){return this.getState(n.PanelEnum.LEFT,e)}getRightState(e){return this.getState(n.PanelEnum.RIGHT,e)}getState(e,t){const r=s.Path.from(o.CompareHelper.isArray(t)?t:[t]);return this._logsEnabled&&console.log(`- [${e}] Get state :`,t,r),this.compareStateIndex[e].get(r.toString())??a.CompareState.NONE}update(e,t){this.panels[e]=o.CompareHelper.deepClone(t),this.arrayIndex[e].clear()}findArrayDiffLevels(e,t,r=0,a=[],n=!1){const o=t.slice(0,r),s=this.arrayIndex[e].get(o.toString())??!1;return n&&(console.log("--- findArrayDiffLevels : level ",r," with path ",t),console.log("--- findArrayDiffLevels : currentPath '",o,"' is array ? ",s)),a.length>0&&(a=a.map((e=>e+1))),s&&a.push(0),r<t.length?this.findArrayDiffLevels(e,t,r+1,a,n):a}findCompareItem(e,t,r){let a;if(r&&o.CompareHelper.hasProperty(e,[r])&&o.CompareHelper.hasStringIndex(e))a=t.findIndex((t=>t[r]===e[r]));else{a=t.map((e=>JSON.stringify(e))).indexOf(JSON.stringify(e))}return{index:a,value:t[a]}}comparePropertyValues(e,t,r,n,s=!1){if(s&&(console.log("--- Compare property value",n.toString(),o.CompareHelper.hasProperty(r,n)?"exist":"not exist"),console.log("--- in object",r)),!o.CompareHelper.hasProperty(r,n))return this.getIncomparableState(e);const i=o.CompareHelper.getIn(r,n);return s&&(console.log("--- Is equal ?",o.CompareHelper.isEqual(t,i)),console.log("--- Other side value",i)),o.CompareHelper.isEqual(t,i)?a.CompareState.EQUAL:a.CompareState.UPDATED}getIncomparableState(e){return e===n.PanelEnum.LEFT?a.CompareState.REMOVED:a.CompareState.ADDED}compareValues(e,t){return o.CompareHelper.isEqual(e,t)?a.CompareState.EQUAL:a.CompareState.UPDATED}compare(e,t,r=new s.Path){let i,l=this._logsEnabled,p=a.CompareState.NONE;const u=e===n.PanelEnum.LEFT?n.PanelEnum.RIGHT:n.PanelEnum.LEFT;o.CompareHelper.isEvaluable(t)&&!o.CompareHelper.isPrimitive(t)&&this.arrayIndex[e].set(r.toString(),o.CompareHelper.isArray(t)),l&&(console.log(`- [${e}] ${r}`),console.log("-- Side value : ",t));const c=this.findArrayDiffLevels(e,r,0,[],l);l&&console.log("-- Array diffs : ",c);let m=this.panels[e],g=this.panels[u],h=r.clone(),d=o.CompareHelper.deepClone(t);if(c.length>0?c.forEach((t=>{const r=h.slice(0,h.length-t),n=o.CompareHelper.getIn(g,r);if(l&&(console.log("--- Current array diff : ",t),console.log("--- Current root : ",m),console.log("--- Current side value : ",d),console.log("--- Array path : ",r),console.log("--- Other side items : ",n),console.log("--- Other side is array ?",o.CompareHelper.isArray(n))),o.CompareHelper.isArray(n))if(0===t)d=o.CompareHelper.getIn(m,r),l&&(console.log("-- Array diff 0"),console.log("-- Property path : ",r),console.log("-- Compare : ",d),console.log("-- With : ",n)),p=this.comparePropertyValues(e,d,g,r,l);else{const s=this.determineArrayIndexFn?this.determineArrayIndexFn(h):"",u=h.slice(0,r.length+1),c=o.CompareHelper.getIn(m,u),E=this.findCompareItem(c,n,s),y=E.value;if(l&&(console.log("-- Object path : ",u),console.log("-- Side object : ",c),console.log("-- Item finded ? ",E)),y){const r=h.slice(u.length);if(1===t){const e=h.last();if(void 0!==e){d=o.CompareHelper.getIn(c,r),l&&(console.log("-- Array diff 1",r),console.log("-- Other side value : ",E.value),console.log("-- Indexes : ",e,E.index));const t=this.compareValues(e,E.index),n=this.compareValues(d,E.value);l&&(console.log("-- compare index : ",t.value),console.log("-- compare value : ",n.value)),p=t.isUpdated&&n.isEqual?a.CompareState.MOVED:n.isUpdated?a.CompareState.UPDATED:a.CompareState.EQUAL}}else d=o.CompareHelper.getIn(c,r),l&&(i=o.CompareHelper.getIn(y,r),console.log("-- Array diff > 1",r),console.log("-- Other side object : ",y),console.log("-- Other side value : ",i)),p=this.comparePropertyValues(e,d,y,r,l);h=r.clone(),m=o.CompareHelper.deepClone(c),d=o.CompareHelper.deepClone(c),g=o.CompareHelper.deepClone(y),l&&(i=o.CompareHelper.deepClone(y))}else p=this.getIncomparableState(e)}else d=o.CompareHelper.getIn(m,r),l&&(console.log("-- No other side array"),console.log("-- Compare",d),console.log("-- With",n)),p=this.comparePropertyValues(e,d,g,r,l)})):(p=this.comparePropertyValues(e,d,this.panels[u],r),l&&(i=o.CompareHelper.getIn(this.panels[u],r),console.log("-- No array upside"),console.log("-- Other side value : ",i))),l&&console.log("-- Update state with : ",p.value),this.compareStateIndex[e].set(r.toString(),p),p.isUpdated&&o.CompareHelper.isTree(t)){const a=o.CompareHelper.keys(t);l&&console.log("-- Sub keys : ",a),a.forEach((a=>{const n=r.clone().add(a);this._logsEnabled&&console.log("-- Sub path :",r,"+",a,"=>",n);const s=o.CompareHelper.isArray(t)?t[o.CompareHelper.parseInt(a)]:t[a];this.compare(e,s,n)}))}}}},(e,t,r)=>{r.r(t),r.d(t,{CompareState:()=>n});var a=r(3);class n{_value;constructor(e=a.CompareStateEnum.NONE){this._value=e}static get NONE(){return new n}static get ADDED(){return new n(a.CompareStateEnum.ADDED)}static get MOVED(){return new n(a.CompareStateEnum.MOVED)}static get UPDATED(){return new n(a.CompareStateEnum.UPDATED)}static get REMOVED(){return new n(a.CompareStateEnum.REMOVED)}static get EQUAL(){return new n(a.CompareStateEnum.EQUAL)}get value(){return this._value}get isNone(){return this._value===a.CompareStateEnum.NONE}get isAdded(){return this._value===a.CompareStateEnum.ADDED}get isMoved(){return this._value===a.CompareStateEnum.MOVED}get isUpdated(){return this._value===a.CompareStateEnum.UPDATED}get isRemoved(){return this._value===a.CompareStateEnum.REMOVED}get isEqual(){return this._value===a.CompareStateEnum.EQUAL}get isChanged(){return this._value!==a.CompareStateEnum.EQUAL}toString(){return this.value}}},(e,t,r)=>{var a;r.r(t),r.d(t,{CompareStateEnum:()=>a}),function(e){e.NONE="",e.ADDED="added",e.MOVED="moved",e.UPDATED="updated",e.REMOVED="removed",e.EQUAL="equal"}(a||(a={}))},(e,t,r)=>{var a;r.r(t),r.d(t,{PanelEnum:()=>a}),function(e){e.LEFT="left",e.RIGHT="right"}(a||(a={}))},(e,t,r)=>{r.r(t),r.d(t,{CompareHelper:()=>o});var a=r(6);const n=["Boolean","Number","String"];class o{static isEvaluable(e){return null!=e}static isBoolean(e){return o.isEvaluable(e)&&("boolean"==typeof e||Object.getPrototypeOf(e).constructor===Boolean)}static isKey(e){return o.isEvaluable(e)&&(o.isNumber(e)||o.isString(e))}static isNumber(e){return o.isEvaluable(e)&&("number"==typeof e||Object.getPrototypeOf(e).constructor===Number)&&!isNaN(+o.stringify(e))}static isSymbol(e){return o.isEvaluable(e)&&("symbol"==typeof e||Object.getPrototypeOf(e).constructor===Symbol)}static isString(e){return o.isEvaluable(e)&&("string"==typeof e||Object.getPrototypeOf(e).constructor===String)}static isArray(e){return o.isEvaluable(e)&&Array.isArray(e)}static isRecord(e){return o.isEvaluable(e)&&"object"==typeof e&&"Object"===Object.getPrototypeOf(e).constructor.name}static isObject(e){return o.isEvaluable(e)&&"object"==typeof e&&-1===[...n,"Array","Object"].indexOf(Object.getPrototypeOf(e).constructor.name)}static hasStringIndex(e){return o.isEvaluable(e)&&"object"==typeof e&&-1===[...n,"Array"].indexOf(Object.getPrototypeOf(e).constructor.name)}static isTree(e){return o.isArray(e)||o.hasStringIndex(e)}static isFunction(e){return o.isEvaluable(e)&&("function"==typeof e||e instanceof Function||"[object Function]"===o.stringify(e))}static isPrimitive(e){return o.isEvaluable(e)&&!o.isTree(e)&&!o.isFunction(e)}static isEqual(e,t){const r=new a.TypeState(e);let n=new a.TypeState(t);const s=Object.is(o.serialize(e),o.serialize(t));if(s){const a=Object.is(r.type,n.type);return a&&r.isObject&&n.isObject?Object.is(Object.getPrototypeOf(e).constructor.name,Object.getPrototypeOf(t).constructor.name):a}return s}static keys(e){return o.isArray(e)?Object.keys(e).map((e=>parseInt(e))):Object.getOwnPropertyNames(e)}static deepClone(e){return o.isArray(e)?e.map((e=>o.deepClone(e))):o.hasStringIndex(e)?o.keys(e).reduce(((t,r)=>{const a=Object.getOwnPropertyDescriptor(e,r);return void 0!==a&&Object.defineProperty(t,r,a),t[r]=o.deepClone(e[r]),t}),Object.create(Object.getPrototypeOf(e))):e}static getIn(e,t){let r=e,a=0;if(r)for(;a<t.length;){const e=t[a];r=o.hasStringIndex(r)?r[e]:o.isArray(r)?r[o.parseInt(e)]:void 0,a++}return r}static parseInt(e){return o.isNumber(e)?e:parseInt(e)}static hasOwn(e,t){return o.isArray(e)&&o.isNumber(t)?t<e.length:Object.hasOwn(e,t)}static hasProperty(e,t){if(o.isKey(t)&&(t=[t]),0===t.length)return!0;if(!o.isEvaluable(e)||!o.isTree(e))return!1;let r=t[0];if(1===t.length)return o.hasOwn(e,r);if(!o.hasOwn(e,r))return!1;const a=(o.isNumber(r),e[r]);return!!o.isTree(a)&&o.hasProperty(a,t.slice(1))}static serialize(e){const t=o.flat(e);return o.isString(t)?t:JSON.stringify(t)}static stringify(e){return o.isEvaluable(e)?void 0!==typeof e.toString||o.isSymbol(e)?e.toString():e+"":null===e?"null":"undefined"}static flat(e){const t=new a.TypeState(e);if(!t.isValuable||t.isPrimitive||t.isFunction)return o.isString(e)?`"${e}"`:o.stringify(e);if(o.isTree(e)){const r=t.isArray?[]:{};return o.keys(e).forEach((t=>{o.isArray(e)?r[t]=o.flat(e[o.parseInt(t)]):o.hasStringIndex(e)&&(r[t]=o.flat(e[t]))})),r}return e}}},(e,t,r)=>{r.r(t),r.d(t,{TypeState:()=>o,TypeStateEnum:()=>a});var a,n=r(5);!function(e){e.NO_EVALUABLE="no_evaluable",e.PRIMITIVE="primitive",e.OBJECT="object",e.RECORD="record",e.ARRAY="array",e.FUNCTION="function"}(a||(a={}));class o{_type;constructor(e){null==e?this._type=a.NO_EVALUABLE:n.CompareHelper.isArray(e)?this._type=a.ARRAY:n.CompareHelper.isRecord(e)?this._type=a.RECORD:n.CompareHelper.isObject(e)?this._type=a.OBJECT:n.CompareHelper.isFunction(e)?this._type=a.FUNCTION:this._type=a.PRIMITIVE}get type(){return this._type}get isValuable(){return this._type!==a.NO_EVALUABLE}get isPrimitive(){return this._type===a.PRIMITIVE}get isArray(){return this._type===a.ARRAY}get isObject(){return this._type===a.OBJECT}get isRecord(){return this._type===a.RECORD}get isFunction(){return this._type===a.FUNCTION}}},(e,t,r)=>{r.r(t),r.d(t,{Path:()=>a});class a extends Array{add(e){return super.push(e),this}clone(){return this.slice()}slice(e,t){const r=new a;return r.push(...super.slice(e,t)),r}toString(){return this.join("/")}last(){return this.length>0?this[this.length-1]:void 0}}},(e,t,r)=>{r.r(t)}],t={};function r(a){var n=t[a];if(void 0!==n)return n.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,r),o.exports}r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};(()=>{r.r(a),r.d(a,{CompareEngine:()=>e.CompareEngine,CompareHelper:()=>n.CompareHelper,CompareState:()=>t.CompareState,Path:()=>o.Path,TypeState:()=>s.TypeState,TypeStateEnum:()=>s.TypeStateEnum});var e=r(1),t=r(2),n=r(5),o=(r(8),r(7)),s=r(6)})();var n=a.CompareEngine,o=a.CompareHelper,s=a.CompareState,i=a.Path,l=a.TypeState,p=a.TypeStateEnum;export{n as CompareEngine,o as CompareHelper,s as CompareState,i as Path,l as TypeState,p as TypeStateEnum};