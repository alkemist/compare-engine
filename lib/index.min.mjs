var e=[,(e,t,r)=>{r.r(t),r.d(t,{CompareEngine:()=>i});var a=r(2),s=r(4),n=r(5),o=r(7);class i{determineArrayIndexFn;compareStateIndex;arrayIndex;panels;constructor(e,t,r){this.determineArrayIndexFn=e,this.compareStateIndex={left:new Map,right:new Map},this.arrayIndex={left:new Map,right:new Map},this.panels={left:t,right:r}}_logsEnabled=!1;set logsEnabled(e){this._logsEnabled=e}get leftValue(){return n.CompareUtils.deepClone(this.panels[s.PanelEnum.LEFT])}get rightValue(){return n.CompareUtils.deepClone(this.panels[s.PanelEnum.RIGHT])}updateLeft(e){this.update(s.PanelEnum.LEFT,e)}updateRight(e){this.update(s.PanelEnum.RIGHT,e)}leftToRight(){this.updateRight(this.panels[s.PanelEnum.LEFT])}rightToLeft(){this.updateLeft(this.panels[s.PanelEnum.RIGHT])}updateCompareIndex(){this.compareStateIndex[s.PanelEnum.LEFT].clear(),this.compareStateIndex[s.PanelEnum.RIGHT].clear(),this.compare(s.PanelEnum.LEFT,this.panels[s.PanelEnum.LEFT]),this.compare(s.PanelEnum.RIGHT,this.panels[s.PanelEnum.RIGHT])}hasChange(){return this.compareStateIndex.right.get("")?.isChanged??!1}getLeftState(e){return this.getState(s.PanelEnum.LEFT,e)}getRightState(e){return this.getState(s.PanelEnum.RIGHT,e)}getState(e,t){const r=o.Path.from(n.CompareUtils.isArray(t)?t:[t]);return this._logsEnabled&&console.log(`- [${e}] Get state :`,t,r),this.compareStateIndex[e].get(r.toString())??a.CompareState.NONE}update(e,t){this.panels[e]=n.CompareUtils.deepClone(t),this.arrayIndex[e].clear()}findArrayDiffLevels(e,t,r=0,a=[],s=!1){const n=t.slice(0,r),o=this.arrayIndex[e].get(n.toString())??!1;return s&&(console.log("--- findArrayDiffLevels : level ",r," with path ",t),console.log("--- findArrayDiffLevels : currentPath '",n,"' is array ? ",o)),a.length>0&&(a=a.map((e=>e+1))),o&&a.push(0),r<t.length?this.findArrayDiffLevels(e,t,r+1,a,s):a}findCompareItem(e,t,r){let a;if(r&&n.CompareUtils.hasProperty(e,[r])&&n.CompareUtils.hasStringIndex(e))a=t.findIndex((t=>t[r]===e[r]));else{a=t.map((e=>JSON.stringify(e))).indexOf(JSON.stringify(e))}return{index:a,value:t[a]}}comparePropertyValues(e,t,r,s,o=!1){if(o&&(console.log("--- Compare property value",s.toString(),n.CompareUtils.hasProperty(r,s)?"exist":"not exist"),console.log("--- in object",r)),!n.CompareUtils.hasProperty(r,s))return this.getIncomparableState(e);const i=n.CompareUtils.getIn(r,s);return o&&(console.log("--- Is equal ?",n.CompareUtils.isEqual(t,i)),console.log("--- Other side value",i)),n.CompareUtils.isEqual(t,i)?a.CompareState.EQUAL:a.CompareState.UPDATED}getIncomparableState(e){return e===s.PanelEnum.LEFT?a.CompareState.REMOVED:a.CompareState.ADDED}compareValues(e,t){return n.CompareUtils.isEqual(e,t)?a.CompareState.EQUAL:a.CompareState.UPDATED}compare(e,t,r=new o.Path){let i,l=this._logsEnabled,p=a.CompareState.NONE;const u=e===s.PanelEnum.LEFT?s.PanelEnum.RIGHT:s.PanelEnum.LEFT;n.CompareUtils.isEvaluable(t)&&!n.CompareUtils.isPrimitive(t)&&this.arrayIndex[e].set(r.toString(),n.CompareUtils.isArray(t)),l&&(console.log(`- [${e}] ${r}`),console.log("-- Side value : ",t));const c=this.findArrayDiffLevels(e,r,0,[],l);l&&console.log("-- Array diffs : ",c);let m=this.panels[e],g=this.panels[u],h=r.clone(),d=n.CompareUtils.deepClone(t);if(c.length>0?c.forEach((t=>{const r=h.slice(0,h.length-t),s=n.CompareUtils.getIn(g,r);if(l&&(console.log("--- Current array diff : ",t),console.log("--- Current root : ",m),console.log("--- Current side value : ",d),console.log("--- Array path : ",r),console.log("--- Other side items : ",s),console.log("--- Other side is array ?",n.CompareUtils.isArray(s))),n.CompareUtils.isArray(s))if(0===t)d=n.CompareUtils.getIn(m,r),l&&(console.log("-- Array diff 0"),console.log("-- Property path : ",r),console.log("-- Compare : ",d),console.log("-- With : ",s)),p=this.comparePropertyValues(e,d,g,r,l);else{const o=this.determineArrayIndexFn?this.determineArrayIndexFn(h):"",u=h.slice(0,r.length+1),c=n.CompareUtils.getIn(m,u),y=this.findCompareItem(c,s,o),E=y.value;if(l&&(console.log("-- Object path : ",u),console.log("-- Side object : ",c),console.log("-- Item finded ? ",y)),E){const r=h.slice(u.length);if(1===t){const e=h.last();if(void 0!==e){d=n.CompareUtils.getIn(c,r),l&&(console.log("-- Array diff 1",r),console.log("-- Other side value : ",y.value),console.log("-- Indexes : ",e,y.index));const t=this.compareValues(e,y.index),s=this.compareValues(d,y.value);l&&(console.log("-- compare index : ",t.value),console.log("-- compare value : ",s.value)),p=t.isUpdated||s.isUpdated?a.CompareState.UPDATED:a.CompareState.EQUAL}}else d=n.CompareUtils.getIn(c,r),l&&(i=n.CompareUtils.getIn(E,r),console.log("-- Array diff > 1",r),console.log("-- Other side object : ",E),console.log("-- Other side value : ",i)),p=this.comparePropertyValues(e,d,E,r,l);h=r.clone(),m=n.CompareUtils.deepClone(c),d=n.CompareUtils.deepClone(c),g=n.CompareUtils.deepClone(E),l&&(i=n.CompareUtils.deepClone(E))}else p=this.getIncomparableState(e)}else d=n.CompareUtils.getIn(m,r),l&&(console.log("-- No other side array"),console.log("-- Compare",d),console.log("-- With",s)),p=this.comparePropertyValues(e,d,g,r,l)})):(p=this.comparePropertyValues(e,d,this.panels[u],r),l&&(i=n.CompareUtils.getIn(this.panels[u],r),console.log("-- No array upside"),console.log("-- Other side value : ",i))),l&&console.log("-- Update state with : ",p.value),this.compareStateIndex[e].set(r.toString(),p),p.isUpdated&&n.CompareUtils.isTree(t)){const a=n.CompareUtils.keys(t);l&&console.log("-- Sub keys : ",a),a.forEach((a=>{const s=r.clone().add(a);this._logsEnabled&&console.log("-- Sub path :",r,"+",a,"=>",s);const o=n.CompareUtils.isArray(t)?t[n.CompareUtils.parseInt(a)]:t[a];this.compare(e,o,s)}))}}}},(e,t,r)=>{r.r(t),r.d(t,{CompareState:()=>s});var a=r(3);class s{_value;constructor(e=a.CompareStateEnum.NONE){this._value=e}static get NONE(){return new s}static get ADDED(){return new s(a.CompareStateEnum.ADDED)}static get UPDATED(){return new s(a.CompareStateEnum.UPDATED)}static get REMOVED(){return new s(a.CompareStateEnum.REMOVED)}static get EQUAL(){return new s(a.CompareStateEnum.EQUAL)}get value(){return this._value}get isNone(){return this._value===a.CompareStateEnum.NONE}get isAdded(){return this._value===a.CompareStateEnum.ADDED}get isUpdated(){return this._value===a.CompareStateEnum.UPDATED}get isRemoved(){return this._value===a.CompareStateEnum.REMOVED}get isEqual(){return this._value===a.CompareStateEnum.EQUAL}get isChanged(){return this._value!==a.CompareStateEnum.EQUAL}toString(){return this.value}}},(e,t,r)=>{var a;r.r(t),r.d(t,{CompareStateEnum:()=>a}),function(e){e.NONE="",e.ADDED="added",e.UPDATED="updated",e.REMOVED="removed",e.EQUAL="equal"}(a||(a={}))},(e,t,r)=>{var a;r.r(t),r.d(t,{PanelEnum:()=>a}),function(e){e.LEFT="left",e.RIGHT="right"}(a||(a={}))},(e,t,r)=>{r.r(t),r.d(t,{CompareUtils:()=>n});var a=r(6);const s=["Boolean","Number","String"];class n{static isEvaluable(e){return null!=e}static isBoolean(e){return n.isEvaluable(e)&&("boolean"==typeof e||Object.getPrototypeOf(e).constructor===Boolean)}static isKey(e){return n.isEvaluable(e)&&(n.isNumber(e)||n.isString(e))}static isNumber(e){return n.isEvaluable(e)&&("number"==typeof e||Object.getPrototypeOf(e).constructor===Number)&&!isNaN(+n.stringify(e))}static isSymbol(e){return n.isEvaluable(e)&&("symbol"==typeof e||Object.getPrototypeOf(e).constructor===Symbol)}static isString(e){return n.isEvaluable(e)&&("string"==typeof e||Object.getPrototypeOf(e).constructor===String)}static isArray(e){return n.isEvaluable(e)&&Array.isArray(e)}static isRecord(e){return n.isEvaluable(e)&&"object"==typeof e&&"Object"===Object.getPrototypeOf(e).constructor.name}static isObject(e){return n.isEvaluable(e)&&"object"==typeof e&&-1===[...s,"Array","Object"].indexOf(Object.getPrototypeOf(e).constructor.name)}static hasStringIndex(e){return n.isEvaluable(e)&&"object"==typeof e&&-1===[...s,"Array"].indexOf(Object.getPrototypeOf(e).constructor.name)}static isTree(e){return n.isArray(e)||n.hasStringIndex(e)}static isFunction(e){return n.isEvaluable(e)&&("function"==typeof e||e instanceof Function||"[object Function]"===n.stringify(e))}static isPrimitive(e){return n.isEvaluable(e)&&!n.isTree(e)&&!n.isFunction(e)}static isEqual(e,t){const r=new a.TypeState(e);let s=new a.TypeState(t);const o=Object.is(n.serialize(e),n.serialize(t));if(o){const a=Object.is(r.type,s.type);return a&&r.isObject&&s.isObject?Object.is(Object.getPrototypeOf(e).constructor.name,Object.getPrototypeOf(t).constructor.name):a}return o}static keys(e){return n.isArray(e)?Object.keys(e).map((e=>parseInt(e))):Object.getOwnPropertyNames(e)}static deepClone(e){return n.isArray(e)?e.map((e=>n.deepClone(e))):n.hasStringIndex(e)?n.keys(e).reduce(((t,r)=>{const a=Object.getOwnPropertyDescriptor(e,r);return void 0!==a&&Object.defineProperty(t,r,a),t[r]=n.deepClone(e[r]),t}),Object.create(Object.getPrototypeOf(e))):e}static getIn(e,t){let r=e,a=0;if(r)for(;a<t.length;){const e=t[a];r=n.hasStringIndex(r)?r[e]:n.isArray(r)?r[n.parseInt(e)]:void 0,a++}return r}static parseInt(e){return n.isNumber(e)?e:parseInt(e)}static hasOwn(e,t){return n.isArray(e)&&n.isNumber(t)?t<e.length:Object.hasOwn(e,t)}static hasProperty(e,t){if(n.isKey(t)&&(t=[t]),0===t.length)return!0;if(!n.isEvaluable(e)||!n.isTree(e))return!1;let r=t[0];if(1===t.length)return n.hasOwn(e,r);if(!n.hasOwn(e,r))return!1;const a=(n.isNumber(r),e[r]);return!!n.isTree(a)&&n.hasProperty(a,t.slice(1))}static serialize(e){const t=n.flat(e);return n.isString(t)?t:JSON.stringify(t)}static stringify(e){return n.isEvaluable(e)?void 0!==typeof e.toString||n.isSymbol(e)?e.toString():e+"":null===e?"null":"undefined"}static flat(e){const t=new a.TypeState(e);if(!t.isValuable||t.isPrimitive||t.isFunction)return n.isString(e)?`"${e}"`:n.stringify(e);if(n.isTree(e)){const r=t.isArray?[]:{};return n.keys(e).forEach((t=>{n.isArray(e)?r[t]=n.flat(e[n.parseInt(t)]):n.hasStringIndex(e)&&(r[t]=n.flat(e[t]))})),r}return e}}},(e,t,r)=>{r.r(t),r.d(t,{TypeState:()=>n,TypeStateEnum:()=>a});var a,s=r(5);!function(e){e.NO_EVALUABLE="no_evaluable",e.PRIMITIVE="primitive",e.OBJECT="object",e.RECORD="record",e.ARRAY="array",e.FUNCTION="function"}(a||(a={}));class n{_type;constructor(e){null==e?this._type=a.NO_EVALUABLE:s.CompareUtils.isArray(e)?this._type=a.ARRAY:s.CompareUtils.isRecord(e)?this._type=a.RECORD:s.CompareUtils.isObject(e)?this._type=a.OBJECT:s.CompareUtils.isFunction(e)?this._type=a.FUNCTION:this._type=a.PRIMITIVE}get type(){return this._type}get isValuable(){return this._type!==a.NO_EVALUABLE}get isPrimitive(){return this._type===a.PRIMITIVE}get isArray(){return this._type===a.ARRAY}get isObject(){return this._type===a.OBJECT}get isRecord(){return this._type===a.RECORD}get isFunction(){return this._type===a.FUNCTION}}},(e,t,r)=>{r.r(t),r.d(t,{Path:()=>a});class a extends Array{add(e){return super.push(e),this}clone(){return this.slice()}slice(e,t){const r=new a;return r.push(...super.slice(e,t)),r}toString(){return this.join("/")}last(){return this.length>0?this[this.length-1]:void 0}}},(e,t,r)=>{r.r(t)}],t={};function r(a){var s=t[a];if(void 0!==s)return s.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,r),n.exports}r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};(()=>{r.r(a),r.d(a,{CompareEngine:()=>e.CompareEngine,CompareState:()=>t.CompareState,CompareUtils:()=>s.CompareUtils,Path:()=>n.Path,TypeState:()=>o.TypeState,TypeStateEnum:()=>o.TypeStateEnum});var e=r(1),t=r(2),s=r(5),n=(r(8),r(7)),o=r(6)})();var s=a.CompareEngine,n=a.CompareState,o=a.CompareUtils,i=a.Path,l=a.TypeState,p=a.TypeStateEnum;export{s as CompareEngine,n as CompareState,o as CompareUtils,i as Path,l as TypeState,p as TypeStateEnum};