define("compare-state.enum",["require","exports"],function(require,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.CompareStateEnum=void 0;var CompareStateEnum;(function(CompareStateEnum){CompareStateEnum["NONE"]="";CompareStateEnum["ADDED"]="added";CompareStateEnum["UPDATED"]="updated";CompareStateEnum["REMOVED"]="removed";CompareStateEnum["EQUAL"]="equal";})(CompareStateEnum=exports.CompareStateEnum||(exports.CompareStateEnum={}));});define("compare-state",["require","exports","compare-state.enum"],function(require,exports,compare_state_enum_1){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.CompareState=void 0;class CompareState{_value;constructor(_value=compare_state_enum_1.CompareStateEnum.NONE){this._value=_value;}
static get NONE(){return new CompareState();}
static get ADDED(){return new CompareState(compare_state_enum_1.CompareStateEnum.ADDED);}
static get UPDATED(){return new CompareState(compare_state_enum_1.CompareStateEnum.UPDATED);}
static get REMOVED(){return new CompareState(compare_state_enum_1.CompareStateEnum.REMOVED);}
static get EQUAL(){return new CompareState(compare_state_enum_1.CompareStateEnum.EQUAL);}
get value(){return this._value;}
get isNone(){return this._value===compare_state_enum_1.CompareStateEnum.NONE;}
get isAdded(){return this._value===compare_state_enum_1.CompareStateEnum.ADDED;}
get isUpdated(){return this._value===compare_state_enum_1.CompareStateEnum.UPDATED;}
get isRemoved(){return this._value===compare_state_enum_1.CompareStateEnum.REMOVED;}
get isEqual(){return this._value===compare_state_enum_1.CompareStateEnum.EQUAL;}
get isChanged(){return this._value!==compare_state_enum_1.CompareStateEnum.EQUAL;}
toString(){return this.value;}}
exports.CompareState=CompareState;});define("panel.enum",["require","exports"],function(require,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.PanelEnum=void 0;var PanelEnum;(function(PanelEnum){PanelEnum["LEFT"]="left";PanelEnum["RIGHT"]="right";})(PanelEnum=exports.PanelEnum||(exports.PanelEnum={}));});define("value.interface",["require","exports"],function(require,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});});define("type-state",["require","exports","compare-utils"],function(require,exports,compare_utils_1){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.TypeState=exports.TypeStateEnum=void 0;var TypeStateEnum;(function(TypeStateEnum){TypeStateEnum["NO_EVALUABLE"]="no_evaluable";TypeStateEnum["PRIMITIVE"]="primitive";TypeStateEnum["OBJECT"]="object";TypeStateEnum["RECORD"]="record";TypeStateEnum["ARRAY"]="array";TypeStateEnum["FUNCTION"]="function";})(TypeStateEnum=exports.TypeStateEnum||(exports.TypeStateEnum={}));class TypeState{_type;constructor(_value){if(_value===undefined||_value===null){this._type=TypeStateEnum.NO_EVALUABLE;}
else if(compare_utils_1.CompareUtils.isArray(_value)){this._type=TypeStateEnum.ARRAY;}
else if(compare_utils_1.CompareUtils.isRecord(_value)){this._type=_value.constructor.name==="Object"?TypeStateEnum.RECORD:TypeStateEnum.OBJECT;}
else if(compare_utils_1.CompareUtils.isFunction(_value)){this._type=TypeStateEnum.FUNCTION;}
else{this._type=TypeStateEnum.PRIMITIVE;}}
get type(){return this._type;}
get isValuable(){return this._type!==TypeStateEnum.NO_EVALUABLE;}
get isPrimitive(){return this._type===TypeStateEnum.PRIMITIVE;}
get isArray(){return this._type===TypeStateEnum.ARRAY;}
get isObject(){return this._type===TypeStateEnum.OBJECT;}
get isRecord(){return this._type===TypeStateEnum.RECORD;}
get isFunction(){return this._type===TypeStateEnum.FUNCTION;}}
exports.TypeState=TypeState;});define("compare-utils",["require","exports","type-state"],function(require,exports,type_state_1){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.CompareUtils=void 0;class CompareUtils{static isEvaluable(value){return value!==null&&value!==undefined;}
static isNumber(value){return CompareUtils.isEvaluable(value)&&!isNaN(+value);}
static isArray(value){return CompareUtils.isEvaluable(value)&&Array.isArray(value);}
static isString(value){return CompareUtils.isEvaluable(value)&&typeof value==="string";}
static isRecord(value){return CompareUtils.isEvaluable(value)&&typeof value==="object";}
static isTree(value){return CompareUtils.isArray(value)||CompareUtils.isRecord(value);}
static isFunction(value){return CompareUtils.isEvaluable(value)&&(typeof value==='function')||(value instanceof Function)||{}.toString.call(value)==='[object Function]';}
static isPrimitive(value){return!CompareUtils.isRecord(value)&&!CompareUtils.isArray(value)&&!CompareUtils.isFunction(value);}
static isEqual(sideValue,otherSideValue){const typeStateSideValue=new type_state_1.TypeState(sideValue);let typeStateOtherSideValue=new type_state_1.TypeState(sideValue);const valueCompareState=Object.is(CompareUtils.serialize(sideValue),CompareUtils.serialize(otherSideValue));if(valueCompareState){const typeCompareState=Object.is(typeStateSideValue.type,typeStateOtherSideValue.type);if(typeCompareState&&CompareUtils.isRecord(sideValue)&&CompareUtils.isRecord(otherSideValue)){return sideValue.constructor.name===otherSideValue.constructor.name;}
return typeCompareState;}
return valueCompareState;}
static deepClone(source){if(Array.isArray(source)){return source.map((item)=>CompareUtils.deepClone(item));}
if(source instanceof Date){return new Date(source.getTime());}
if(source&&typeof source==="object"){const sourceObj=source;return Object.getOwnPropertyNames(source).reduce((o,prop)=>{const propDesc=Object.getOwnPropertyDescriptor(source,prop);if(propDesc!==undefined){Object.defineProperty(o,prop,propDesc);}
o[prop]=CompareUtils.deepClone(sourceObj[prop]);return o;},Object.create(Object.getPrototypeOf(source)));}
return source;}
static getIn(object,path){let value=object;let i=0;if(value){while(i<path.length){if(CompareUtils.isRecord(value)){value=value[path[i]];}
else if(CompareUtils.isArray(value)){value=value[parseInt(path[i])];}
else{value=undefined;}
i++;}}
return value;}
static hasProperty(value,path){if(path.length===0){return true;}
if(!CompareUtils.isTree(value)){return path.length>0;}
const propertyPath=CompareUtils.isArray(value)?parseInt(path[0]):path[0];if(path.length===1){return value.hasOwnProperty(propertyPath);}
else if(!value.hasOwnProperty(propertyPath)){return false;}
const subValue=CompareUtils.isNumber(propertyPath)?value[propertyPath]:value[propertyPath];return CompareUtils.isRecord(subValue)||CompareUtils.isArray(subValue)?CompareUtils.hasProperty(subValue,path.slice(1)):false;}
static flat(value){const typeState=new type_state_1.TypeState(value);if(!CompareUtils.isEvaluable(value)){return value===null?"null":"undefined";}
if(typeState.isPrimitive){if(CompareUtils.isString(value)){return`"${value}"`;}
return value.toString();}
if(typeState.isFunction){return value.toString();}
const flat=typeState.isArray?[]:{};const items=CompareUtils.isArray(value)?value.map((_,index)=>index.toString()):Object.keys(value);items.forEach((index)=>{const child=CompareUtils.isArray(value)?value[parseInt(index,10)]:value[index];flat[index]=CompareUtils.flat(child);});return flat;}
static serialize(value){const flat=CompareUtils.flat(value);if(CompareUtils.isString(flat)){return flat;}
return JSON.stringify(flat);}}
exports.CompareUtils=CompareUtils;});define("finded-item.interface",["require","exports"],function(require,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});});define("path",["require","exports"],function(require,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.Path=void 0;class Path extends Array{add(el){super.push(el.toString());return this;}
clone(){return this.slice();}
slice(start,end){return new Path(...super.slice(start,end));}
toString(){return this.join('/');}}
exports.Path=Path;});define("compare-engine",["require","exports","compare-state","panel.enum","compare-utils","path"],function(require,exports,compare_state_1,panel_enum_1,compare_utils_2,path_1){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.CompareEngine=void 0;class CompareEngine{determineArrayIndexFn;compareStateIndex;arrayIndex;panels;constructor(determineArrayIndexFn,leftValue=null,rightValue=null){this.determineArrayIndexFn=determineArrayIndexFn;this.compareStateIndex={left:new Map(),right:new Map()};this.arrayIndex={left:new Map(),right:new Map()};this.panels={left:leftValue,right:rightValue};}
updateLeft(value){this.update(panel_enum_1.PanelEnum.LEFT,value);}
updateRight(value){this.update(panel_enum_1.PanelEnum.RIGHT,value);}
updateCompareIndex(){this.compareStateIndex[panel_enum_1.PanelEnum.LEFT].clear();this.compareStateIndex[panel_enum_1.PanelEnum.RIGHT].clear();this.compare(panel_enum_1.PanelEnum.LEFT,this.panels[panel_enum_1.PanelEnum.LEFT]);this.compare(panel_enum_1.PanelEnum.RIGHT,this.panels[panel_enum_1.PanelEnum.RIGHT]);}
hasChange(){return this.compareStateIndex.right.get("")?.isChanged??false;}
getLeftState(path){return this.getState(panel_enum_1.PanelEnum.LEFT,path);}
getRightState(path){return this.getState(panel_enum_1.PanelEnum.RIGHT,path);}
getState(panel,path){return this.compareStateIndex[panel].get(compare_utils_2.CompareUtils.isArray(path)?path.join("/"):path)??compare_state_1.CompareState.NONE;}
update(panel,value){this.panels[panel]=value;this.arrayIndex[panel].clear();}
findArrayDiffLevels(panel,path,level=1,diffs=[]){const currentPath=path.slice(0,level);const isArray=this.arrayIndex[panel].get(currentPath.toString())??false;if(diffs.length>0){diffs=diffs.map(value=>value+1);}
if(isArray){diffs.push(0);}
if(level<path.length){return this.findArrayDiffLevels(panel,path,level+1,diffs);}
return diffs;}
findCompareItem(sideValue,otherSideItems,searchKey){let itemIndex;if(searchKey&&compare_utils_2.CompareUtils.isRecord(sideValue)&&compare_utils_2.CompareUtils.hasProperty(sideValue,[searchKey])){itemIndex=otherSideItems.findIndex((item)=>item[searchKey]===sideValue[searchKey]);}
else{const flattenItems=otherSideItems.map(item=>JSON.stringify(item));itemIndex=flattenItems.indexOf(JSON.stringify(sideValue));}
return{index:itemIndex,value:otherSideItems[itemIndex]};}
comparePropertyValues(panel,sideValue,otherSideObject,propertyPath,showLog=false){if(showLog){console.log('--- Compare property value',propertyPath,compare_utils_2.CompareUtils.hasProperty(otherSideObject,propertyPath)?"exist":"not exist");console.log('--- in object',otherSideObject);}
if(!compare_utils_2.CompareUtils.hasProperty(otherSideObject,propertyPath)){return this.getIncomparableState(panel);}
const currentOtherSideValue=compare_utils_2.CompareUtils.getIn(otherSideObject,propertyPath);if(showLog){console.log('--- Is equal ?',compare_utils_2.CompareUtils.isEqual(sideValue,currentOtherSideValue));console.log('--- Other side value',currentOtherSideValue);}
return compare_utils_2.CompareUtils.isEqual(sideValue,currentOtherSideValue)?compare_state_1.CompareState.EQUAL:compare_state_1.CompareState.UPDATED;}
getIncomparableState(panel){return panel===panel_enum_1.PanelEnum.LEFT?compare_state_1.CompareState.REMOVED:compare_state_1.CompareState.ADDED;}
compareValues(panel,sideValue,otherSideValue){return compare_utils_2.CompareUtils.isEqual(sideValue,otherSideValue)?compare_state_1.CompareState.EQUAL:compare_state_1.CompareState.UPDATED;}
compare(panel,sideValue,path=new path_1.Path()){let showLog=false;let otherSideValue,compareState=compare_state_1.CompareState.NONE;const otherPanel=panel===panel_enum_1.PanelEnum.LEFT?panel_enum_1.PanelEnum.RIGHT:panel_enum_1.PanelEnum.LEFT;if(!compare_utils_2.CompareUtils.isPrimitive(sideValue)){this.arrayIndex[panel].set(path.toString(),compare_utils_2.CompareUtils.isArray(sideValue));}
const arrayDiffLevels=this.findArrayDiffLevels(panel,path);if(showLog){console.log(`-[${panel}]${path.toString()}`);console.log('-- Side value : ',sideValue);console.log('-- Array diffs : ',arrayDiffLevels);}
let currentRoot=this.panels[panel];let currentOtherRoot=this.panels[otherPanel];let currentPath=compare_utils_2.CompareUtils.deepClone(path);let currentSideValue=compare_utils_2.CompareUtils.deepClone(sideValue);if(arrayDiffLevels.length>0){arrayDiffLevels.forEach((arrayDiffLevel)=>{const arrayPath=currentPath.slice(0,currentPath.length-arrayDiffLevel);const otherSideItems=compare_utils_2.CompareUtils.getIn(currentOtherRoot,arrayPath);if(showLog){console.log('--- Current array diff : ',arrayDiffLevel);console.log('--- Current root : ',currentRoot);console.log('--- Current side value : ',currentSideValue);console.log('--- Array path : ',arrayPath);console.log('--- Other side items : ',otherSideItems);console.log('--- Other side is array ?',compare_utils_2.CompareUtils.isArray(otherSideItems));}
if(compare_utils_2.CompareUtils.isArray(otherSideItems)){if(arrayDiffLevel===0){currentSideValue=compare_utils_2.CompareUtils.getIn(currentRoot,arrayPath);if(showLog){console.log('-- Array diff 0');console.log('-- Property path : ',arrayPath);console.log('-- Compare : ',currentSideValue);console.log('-- With : ',otherSideItems);}
compareState=this.comparePropertyValues(panel,currentSideValue,currentOtherRoot,arrayPath,showLog);}
else{const searchKey=this.determineArrayIndexFn?this.determineArrayIndexFn(currentPath):"";const objectPath=currentPath.slice(0,arrayPath.length+1);const sideObject=compare_utils_2.CompareUtils.getIn(currentRoot,objectPath);const itemFinded=this.findCompareItem(sideObject,otherSideItems,searchKey);const otherSideObject=itemFinded.value;if(otherSideObject){const propertyPath=currentPath.slice(objectPath.length);if(arrayDiffLevel===1){const index=parseInt([...currentPath].pop(),10);currentSideValue=compare_utils_2.CompareUtils.getIn(sideObject,propertyPath);if(showLog){console.log('-- Array diff 1',propertyPath);console.log('-- Other side value : ',itemFinded.value);}
const compareIndex=this.compareValues(panel,index,itemFinded.index);const compareValue=this.compareValues(panel,currentSideValue,itemFinded.value);compareState=compareIndex.isUpdated||compareValue.isUpdated?compare_state_1.CompareState.UPDATED:compare_state_1.CompareState.EQUAL;}
else{currentSideValue=compare_utils_2.CompareUtils.getIn(sideObject,propertyPath);otherSideValue=compare_utils_2.CompareUtils.getIn(otherSideObject,propertyPath);if(showLog){console.log('-- Array diff > 1',propertyPath);console.log('-- Other side object : ',otherSideObject);console.log('-- Other side value : ',otherSideValue);}
compareState=this.comparePropertyValues(panel,currentSideValue,otherSideObject,propertyPath,showLog);}
currentPath=compare_utils_2.CompareUtils.deepClone(propertyPath);currentRoot=compare_utils_2.CompareUtils.deepClone(sideObject);currentSideValue=compare_utils_2.CompareUtils.deepClone(sideObject);currentOtherRoot=compare_utils_2.CompareUtils.deepClone(otherSideObject);otherSideValue=compare_utils_2.CompareUtils.deepClone(otherSideObject);}
else{compareState=this.getIncomparableState(panel);}}}
else{currentSideValue=compare_utils_2.CompareUtils.getIn(currentRoot,arrayPath);if(showLog){console.log('-- No other side array');console.log('-- Compare',currentSideValue);console.log('-- With',otherSideItems);}
compareState=this.comparePropertyValues(panel,currentSideValue,currentOtherRoot,arrayPath,showLog);}});}
else{otherSideValue=compare_utils_2.CompareUtils.getIn(this.panels[otherPanel],path);compareState=this.comparePropertyValues(panel,currentSideValue,this.panels[otherPanel],path);if(showLog){console.log('-- No array upside');console.log('-- Other side value : ',otherSideValue);}}
if(showLog){console.log('-- Update state with : ',compareState);}
this.compareStateIndex[panel].set(path.toString(),compareState);if(compareState.isUpdated&&compare_utils_2.CompareUtils.isTree(sideValue)){const items=compare_utils_2.CompareUtils.isArray(sideValue)?sideValue.map((_,index)=>index.toString()):Object.keys(sideValue);items.forEach((index)=>{const subPath=path.clone().add(index);const subSideValue=compare_utils_2.CompareUtils.isArray(sideValue)?sideValue[parseInt(index,10)]:sideValue[index];this.compare(panel,subSideValue,subPath);});}}}
exports.CompareEngine=CompareEngine;});define("test-data",["require","exports","type-state"],function(require,exports,type_state_2){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.testValues=void 0;const voidFunction=()=>{};const voidFunctionSerialized="() => {\n"+"}";const paramsFunction=(param,callback)=>true;const paramsFunctionSerialized="(param, callback) => true";const classicFunction=function(){return{param:"string"};};const classicFunctionSerialized="function () {\n"+"    return {\n"+"        param: \"string\"\n"+"    };\n"+"}";const asyncFunction=async()=>{return Promise.resolve(1);};const asyncFunctionSerialized="async () => {\n"+"    return Promise.resolve(1);\n"+"}";class ParentTest{propertyOverride;propertyUndefined;propertyNull;propertyZero;propertyOne;propertyTwo;propertyTwoPointOne;propertyTrue;propertyRecord;voidFn;paramsFn;classicFn;asyncFn;static staticVar='staticVar';constructor(propertyOverride,propertyUndefined=undefined,propertyNull=null,propertyZero=0,propertyOne=1,propertyTwo=2,propertyTwoPointOne=2.1,propertyTrue=true,propertyRecord,voidFn,paramsFn,classicFn,asyncFn){this.propertyOverride=propertyOverride;this.propertyUndefined=propertyUndefined;this.propertyNull=propertyNull;this.propertyZero=propertyZero;this.propertyOne=propertyOne;this.propertyTwo=propertyTwo;this.propertyTwoPointOne=propertyTwoPointOne;this.propertyTrue=propertyTrue;this.propertyRecord=propertyRecord;this.voidFn=voidFn;this.paramsFn=paramsFn;this.classicFn=classicFn;this.asyncFn=asyncFn;this.propertyRecord={property:"value"};this.voidFn=voidFunction;this.paramsFn=paramsFunction;this.classicFn=classicFunction;this.asyncFn=asyncFunction;}
static staticFunc(){return'staticFunc';}}
const objectFunction=(promiseCallback)=>ParentTest;const objectFunctionSerialized="(promiseCallback) => ParentTest";const commonObjectTestSerialized={propertyOverride:'"1"',propertyUndefined:"undefined",propertyNull:"null",propertyZero:"0",};const privateObjectTestSerialized={propertyOne:"1",propertyTwo:"2",propertyTwoPointOne:"2.1",propertyTrue:"true",propertyRecord:{"property":'"value"'},voidFn:voidFunctionSerialized,paramsFn:paramsFunctionSerialized,classicFn:classicFunctionSerialized,asyncFn:asyncFunctionSerialized,};const parentTestSerialized={...commonObjectTestSerialized,...privateObjectTestSerialized};const anyArray=["1",undefined,null,0,1,2,2.1,true,{property:"value"},voidFunction,paramsFunction,classicFunction,asyncFunction,objectFunction];const anyArraySerialized=[...Object.values(commonObjectTestSerialized),...Object.values(privateObjectTestSerialized),objectFunctionSerialized];class ChildTest extends ParentTest{propertyOverride;propertyObject;constructor(propertyOverride,propertyObject=new ParentTest("x")){super(propertyOverride);this.propertyOverride=propertyOverride;this.propertyObject=propertyObject;}
definitionFunction(){return true;}}
const childTestSerialized={...parentTestSerialized,propertyOverride:'"2"',propertyObject:{...parentTestSerialized,propertyOverride:'"x"',},};exports.testValues=[{name:"undefined",value:undefined,expectedType:type_state_2.TypeStateEnum.NO_EVALUABLE,expectedSerialize:"undefined"},{name:"null",value:null,expectedType:type_state_2.TypeStateEnum.NO_EVALUABLE,expectedSerialize:"null"},{name:"true",value:true,expectedType:type_state_2.TypeStateEnum.PRIMITIVE,expectedSerialize:"true"},{name:"false",value:false,expectedType:type_state_2.TypeStateEnum.PRIMITIVE,expectedSerialize:"false"},{name:"0",value:0,expectedType:type_state_2.TypeStateEnum.PRIMITIVE,expectedSerialize:"0"},{name:"1",value:1,expectedType:type_state_2.TypeStateEnum.PRIMITIVE,expectedSerialize:"1"},{name:"2",value:2,expectedType:type_state_2.TypeStateEnum.PRIMITIVE,expectedSerialize:"2"},{name:"2.1",value:2.1,expectedType:type_state_2.TypeStateEnum.PRIMITIVE,expectedSerialize:"2.1"},{name:"",value:"",expectedType:type_state_2.TypeStateEnum.PRIMITIVE,expectedSerialize:'""'},{name:"string",value:"string",expectedType:type_state_2.TypeStateEnum.PRIMITIVE,expectedSerialize:'"string"'},{name:"[]",value:[],expectedType:type_state_2.TypeStateEnum.ARRAY,expectedSerialize:"[]"},{name:'[{property: "value"}]',value:[{property:"value"}],expectedType:type_state_2.TypeStateEnum.ARRAY,expectedSerialize:'[{"property":"\\\"value\\\""}]'},{name:'{property: "value"}',value:{property:"value"},expectedType:type_state_2.TypeStateEnum.RECORD,expectedSerialize:'{"property":"\\\"value\\\""}'},{name:"voidFunction",value:voidFunction,expectedType:type_state_2.TypeStateEnum.FUNCTION,expectedSerialize:voidFunctionSerialized},{name:"paramsFunction",value:paramsFunction,expectedType:type_state_2.TypeStateEnum.FUNCTION,expectedSerialize:paramsFunctionSerialized},{name:"classicFunction",value:classicFunction,expectedType:type_state_2.TypeStateEnum.FUNCTION,expectedSerialize:classicFunctionSerialized},{name:"asyncFunction",value:asyncFunction,expectedType:type_state_2.TypeStateEnum.FUNCTION,expectedSerialize:asyncFunctionSerialized},{name:"objectFunction",value:objectFunction,expectedType:type_state_2.TypeStateEnum.FUNCTION,expectedSerialize:objectFunctionSerialized},{name:"object parent",value:new ParentTest("1"),expectedType:type_state_2.TypeStateEnum.OBJECT,expectedSerialize:JSON.stringify(parentTestSerialized)},{name:"object child",value:new ChildTest("2"),expectedType:type_state_2.TypeStateEnum.OBJECT,expectedSerialize:JSON.stringify(childTestSerialized)},{name:"any array",value:anyArray,expectedType:type_state_2.TypeStateEnum.ARRAY,expectedSerialize:JSON.stringify(anyArraySerialized)},];});